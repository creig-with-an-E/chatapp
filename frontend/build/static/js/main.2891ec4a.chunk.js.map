{"version":3,"sources":["assets/imgs/spinner.gif","components/Message.js","components/MessageList.js","components/NewRoomForm.js","components/RoomList.js","components/SendMessageForm.js","components/spinner.js","components/login.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Message","props","currentUser","username","react_default","a","createElement","className","style","border","justifyItems","color","background","borderRight","marginRight","fontSize","fontWeight","text","MessageList","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","console","log","_this2","messageData","map","message","index","Message_Message","key","chat","name","Component","NewRoomForm","state","roomName","submitHandle","event","preventDefault","addRoom","setState","changeHandle","input","target","value","bind","assertThisInitialized","onSubmit","onChange","type","placeholder","required","id","RoomList","switchRoom","active","selectedRoom","href","concat","onClick","roomList","renderElement","SendMessageForm","handleChange","handleSubmit","sendMessage","spinnerImage","require","Spinner","display","width","justifyContent","src","alt","Login","password","defineProperty","_this$state","login","button","loading","spinner_Spinner","method","onChangeHandle","error","App","updateMessages","data","msgData","messages","push","environmentPort","sendMessageHandle","addRoomHandle","switchRoomHandle","socket","openSocket","connect","on","rooms","currentRoom","updateRooms","emit","newRoom","msg","toConsumableArray","_this3","_ref","axios","post","then","response","status","catch","RoomList_RoomList","NewRoomForm_NewRoomForm","MessageList_MessageList","SendMessageForm_SendMessageForm","login_Login","userLogin","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2891ec4a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/spinner.be0d9fd5.gif\";","import React from \"react\";\n\nconst Message = props => {\n  const currentUser = props.currentUser === props.username ? \"Me\" : null;\n  return (\n    <div className=\"message\" style={currentUser ? {border:0,justifyItems:\"center\",color:\"#FFC42D\",background:\"#FFC42D\",borderRight: \"5px solid #fffffa\", marginRight:15} : {}}>\n      <div className=\"message-username\"\n        style={currentUser?{fontSize:16,fontWeight:\"bold\", color:\"#002343\" }:{}}\n      >\n        {currentUser || props.username}</div>\n      <div\n        className=\"message-text\"\n        style={{color:\"#002343\"}}\n        >\n        {props.text}\n      </div>\n    </div>\n  );\n};\n\nexport { Message };\n","import React, { Component } from \"react\";\nimport { Message } from \"../components\";\n\nclass MessageList extends Component {\n  constructor(props) {\n    super(props);\n    console.log(\"message List\");\n  }\n\n  render() {\n    return (\n      <div className=\"message-list\">\n        {this.props.messageData.map((message, index) => {\n          return (\n            <Message\n              key={index}\n              text={message.chat}\n              username={message.name}\n              currentUser={this.props.currentUser}\n            />\n          );\n        })}\n      </div>\n    );\n  }\n}\n\nexport { MessageList };\n","import React, { Component } from 'react';\n\nclass NewRoomForm extends Component {\n   constructor(){\n     super()\n     this.submitHandle = this.submitHandle.bind(this);\n     this.changeHandle = this.changeHandle.bind(this)\n   } \n   state = {\n     roomName:\"\"\n   }\n\n    submitHandle=(event)=>{\n      //handles the form submit action\n      event.preventDefault()\n      this.props.addRoom(this.state.roomName)\n      this.setState({roomName:''})\n    }\n\n    changeHandle=(input)=>{\n      //updates the state when text enter in form\n      this.setState({\n        roomName: input.target.value\n      })\n      // console.log(this.state.roomName)\n    }\n\n    render() { \n        return (\n          <div className=\"new-room-form\">\n            <form onSubmit={this.submitHandle}>\n              <input\n                  onChange={this.changeHandle}\n                  value={this.state.roomName}\n                  type=\"text\" \n                  placeholder=\"Create room\" \n                  required />\n              <button id=\"create-room-btn\" type=\"submit\">+</button>\n            </form>\n          </div>\n          );\n    }\n}\n \nexport {NewRoomForm};","import React, { Component } from \"react\";\n\nclass RoomList extends Component {\n  switchRoom(roomName) {\n  this.props.switchRoom(roomName);\n  }\n\n  componentDidMount(){\n\n  }\n\n  renderElement(roomName, index){\n    const active = roomName === this.props.selectedRoom ? {color:\"#FFC42D\", fontWeight: 'bold',} : {}\n  return(\n    <li key={index} className={\"room\"}>\n        <a\n          style={active}\n          href={`#${roomName}`}\n          onClick={() => this.switchRoom(roomName)}\n        >\n          {\" \"}\n           {` ${roomName}`}\n        </a>\n    </li>\n  )\n  }\n\n  render() {\n  return (\n    <div className=\"rooms-list\">\n    <h3>Rooms</h3>\n    <ul>\n      {this.props.roomList.map((roomName, index) => {\n      //selected room\n      return (\n        this.renderElement(roomName,index)\n      );\n      })}\n    </ul>\n    </div>\n  );\n  }\n}\n\nexport { RoomList };\n","import React, { Component } from 'react';\n\nclass SendMessageForm extends Component {\n    constructor(props){\n        super(props)\n        this.state={\n            message: \"\"\n        }\n        this.handleChange = this.handleChange.bind(this)\n        this.handleSubmit = this.handleSubmit.bind(this)\n    }\n\n    handleChange=(input)=>{\n      //handles the state for message input field\n      this.setState({message:input.target.value})\n\n    }\n\n    handleSubmit=(event)=>{\n        event.preventDefault()\n        this.props.sendMessage(this.state.message)\n        this.setState({message:''})\n    }\n\n    render() {\n        return (\n            <form className=\"send-message-form\"\n                  onSubmit={this.handleSubmit}\n            >\n                <input\n                    onChange={this.handleChange}\n                    value={this.state.message}\n                    placeholder=\"Start typing... Enter to send\"\n                    type=\"text\" />\n            </form>\n        )\n    }\n}\n \nexport {SendMessageForm};","import React from 'react';\nconst spinnerImage = require(\"../assets/imgs/spinner.gif\")\n\nconst Spinner=()=>(\n   <span style={{display: \"flex\", width:\"100%\", justifyContent:\"center\"}}><img src={spinnerImage} className=\"spinner\" alt=\"spinner\"/></span>\n)\n\nexport { Spinner }","import React, { Component } from \"react\";\nimport \"./login.css\";\nimport {Spinner} from \"../components/spinner\"\n\nclass Login extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      username: \"\",\n      password: \"\"\n    };\n  }\n  onChangeHandle(event) {\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n  }\n\n  submitHandle(event) {\n    event.preventDefault();\n    // references App.js Function\n    const { username, password } = this.state\n    this.props.login({username , password});\n  }\n\n  render() {\n    let button = <button type=\"submit\" className=\"btn btn-primary btn-block btn-large\" >\n                    Let me in.\n                  </button>\n    if(this.props.loading){\n      button = <Spinner />\n    }\n    return (\n      <div className=\"login\">\n        <h1>ChatR</h1>\n        <form method=\"get\" onSubmit={this.submitHandle.bind(this)}>\n          <input\n            className=\"input\"\n            type=\"text\"\n            value={this.state.username}\n            onChange={this.onChangeHandle.bind(this)}\n            name=\"username\"\n            placeholder=\"Username\"\n            required=\"required\"\n          />\n          <input\n            className=\"input\"\n            type=\"password\"\n            value={this.state.password}\n            onChange={this.onChangeHandle.bind(this)}\n            name=\"password\"\n            placeholder=\"Password\"\n            required=\"required\"\n          />\n          {button}\n          <span className=\"error\">{this.props.error}</span>\n        </form>\n        <small>New accounts will be automatically created</small>\n      </div>\n    );\n  }\n}\n\nexport { Login };\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport {\n  RoomList,\n  MessageList,\n  NewRoomForm,\n  SendMessageForm,\n  Login\n} from \"./components\";\n\nimport openSocket from \"socket.io-client\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      messages: [],\n      roomList: [],\n      roomName: null,\n      username: null,\n      error:\"\",\n      loading: false\n    };\n    this.environmentPort =\n      process.env.NODE_ENV !== \"production\" ? \"http://localhost:3030\" : \"/\"; //used to set port either to 3030 or /\n    this.sendMessageHandle = this.sendMessage.bind(this);\n    this.addRoomHandle = this.addRoom.bind(this);\n    this.switchRoomHandle = this.switchRoom.bind(this);\n  }\n\n  componentDidMount() {\n    //setting up socket\n      this.socket = openSocket.connect(this.environmentPort); //when running locally connect to localhost:3030\n      this.socket.on(\"new_message\", data => {\n        this.updateMessages(data);\n      });\n      this.socket.on(\"initialize\", data => {\n        // initializing the app state\n        this.setState({\n          roomList:data.rooms,\n          roomName: data.currentRoom,\n          messages: data.messages\n        }); \n      });\n      this.socket.on(\"createRoom\", data => {\n        this.updateRooms(data.rooms);\n      });\n\n      this.socket.on(\"switchRoom\", data => {\n        this.setState({ roomName: data.roomName, messages: data.messages });\n      });\n\n  }\n\n  componentDidUpdate(){\n    if(this.state.username){\n      this.socket.emit(\"username\", { username: this.state.username });\n    }\n  }\n\n  updateMessages = data => {\n    //called when new message received\n    let msgData = [];\n    msgData = this.state.messages;\n    msgData.push(data);\n    this.setState({ messages: msgData });\n  };\n\n  switchRoom(newRoom) {\n    this.setState({ roomName: newRoom, messages: [] });\n    this.socket.emit(\"switchRoom\", { roomName: newRoom });\n  }\n\n  updateRooms(rooms) {\n    this.setState({ roomList: rooms });\n  }\n\n  sendMessage(msg) {\n    //handle to send message\n    //message sent to server and then handled by updateMessages()\n    this.socket.emit(\"new_message\", { message: msg });\n  }\n\n  addRoom(newRoom) {\n    //adds room through new room form\n    const rooms = [...this.state.roomList];\n    rooms.push(newRoom);\n    this.setState({\n      roomList: rooms\n    });\n    this.socket.emit(\"createRoom\", { roomName: newRoom });\n  }\n\n  userLogin({ username, password }) {\n    //used to authenticate the user\n    this.setState({loading: true, error:\"\"})\n    axios.post(this.environmentPort, { password, username })\n      .then(response => {\n        if (response.status === 200) {\n          this.setState({\n            loading: false,\n            error: \"\",\n            username: response.data.username\n          });\n        } else {\n          this.setState({\n            loading:false,\n            error: \"something went wrong\"\n          });\n        }\n      })\n      .catch(error => {\n        this.setState({\n          username: null,\n          error: \"something went wrong\"\n        });\n      });\n  }\n\n  render() {\n    if (!this.state.username) {\n      return <Login loading={this.state.loading} error={this.state.error} login={this.userLogin.bind(this)} />;\n    }\n    return (\n      <div className=\"app\">\n        <section className=\"side-section\">\n        <RoomList\n          switchRoom={this.switchRoomHandle}\n          selectedRoom={this.state.roomName}\n          roomList={this.state.roomList}\n        />\n        <NewRoomForm addRoom={this.addRoomHandle} />\n        </section>\n        <main className=\"main-section\">\n        <MessageList\n          messageData={this.state.messages}\n          currentUser={this.state.username}\n        />\n        <SendMessageForm sendMessage={this.sendMessageHandle} />\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}