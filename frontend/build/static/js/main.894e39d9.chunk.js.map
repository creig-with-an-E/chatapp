{"version":3,"sources":["components/Message.js","components/MessageList.js","components/NewRoomForm.js","components/RoomList.js","components/SendMessageForm.js","App.js","serviceWorker.js","index.js"],"names":["Message","props","react_default","a","createElement","className","username","text","MessageList","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","messages","messageData","map","message","index","Message_Message","key","Component","NewRoomForm","state","roomName","submitHandle","event","preventDefault","addRoom","setState","changeHandle","input","target","value","bind","assertThisInitialized","onSubmit","onChange","type","placeholder","required","id","RoomList","switchRoom","active","selectedRoom","color","fontSize","style","href","concat","onClick","_this2","styles","headerStyle","roomList","renderElement","SendMessageForm","handleChange","handleSubmit","sendMessage","App","updateMessages","data","msgData","push","console","log","sendMessageHandle","addRoomHandle","switchRoomHandle","socket","openSocket","connect","on","updateRooms","rooms","usernameValue","JSON","stringify","newRoom","emit","msg","toConsumableArray","RoomList_RoomList","MessageList_MessageList","SendMessageForm_SendMessageForm","NewRoomForm_NewRoomForm","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.894e39d9.chunk.js","sourcesContent":["import React from 'react';\n\nconst Message =(props)=>{\n        return (\n         <div className=\"message\">\n           <div className=\"message-username\">\n              {props.username}\n           </div>\n           <div className=\"message-text\">\n              {props.text}\n           </div>\n          </div>\n        );\n}\n \nexport {Message};","import React, { Component } from 'react';\nimport {Message} from '../components'\n\nclass MessageList extends Component {\n    constructor(props){\n      super(props)\n      this.messages = this.props.messageData\n    }\n    render() { \n        return (\n          <div className=\"message-list\">\n            {this.messages.map((message,index)=>{\n              return (\n                <Message key={index} \n                    text={message.text}\n                    username={message.username}\n                 />\n )\n            })}\n          </div> );\n    }\n}\n \nexport { MessageList};","import React, { Component } from 'react';\n\nclass NewRoomForm extends Component {\n   constructor(){\n     super()\n     this.submitHandle = this.submitHandle.bind(this);\n     this.changeHandle = this.changeHandle.bind(this)\n   } \n   state = {\n     roomName:\"\"\n   }\n\n    submitHandle=(event)=>{\n      //handles the form submit action\n      event.preventDefault()\n      this.props.addRoom(this.state.roomName)\n      this.setState({roomName:''})\n    }\n\n    changeHandle=(input)=>{\n      //updates the state when text enter in form\n      this.setState({\n        roomName: input.target.value\n      })\n      // console.log(this.state.roomName)\n    }\n\n    render() { \n        return (\n          <div className=\"new-room-form\">\n            <form onSubmit={this.submitHandle}>\n              <input\n                  onChange={this.changeHandle}\n                  value={this.state.roomName}\n                  type=\"text\" \n                  placeholder=\"NewRoomForm\" \n                  required />\n              <button id=\"create-room-btn\" type=\"submit\">+</button>\n            </form>\n          </div>\n          );\n    }\n}\n \nexport {NewRoomForm};","import React, { Component } from \"react\";\n\nclass RoomList extends Component {\n  switchRoom(roomName) {\n  this.props.switchRoom(roomName);\n  }\n\n  componentDidMount(){\n\n  }\n\n  renderElement(roomName, index){\n    const active = roomName === this.props.selectedRoom ? { color: \"#fffffa\", fontSize:\"1.2rem\"} : {}\n  return(\n    <li key={index} className={\"room \"}>\n        <a\n          style={active}\n          href={`#${roomName}`}\n          onClick={() => this.switchRoom(roomName)}\n        >\n          {\" \"}\n           {` ${roomName}`}\n        </a>\n    </li>\n  )\n  }\n\n  render() {\n  return (\n    <div className=\"rooms-list\">\n    <ul>\n      <h3 style={styles.headerStyle}>Available Rooms</h3>\n      {this.props.roomList.map((roomName, index) => {\n      //selected room\n      return (\n        this.renderElement(roomName,index)\n      );\n      })}\n    </ul>\n    </div>\n  );\n  }\n}\n\nexport { RoomList };\n\nconst styles = {\n  headerStyle: {\n  fontSize: 22\n  }\n};\n","import React, { Component } from 'react';\n\nclass SendMessageForm extends Component {\n    constructor(props){\n        super(props)\n\n        this.state={\n            message: \"\"\n        }\n        this.handleChange = this.handleChange.bind(this)\n        this.handleSubmit = this.handleSubmit.bind(this)\n    }\n\n    handleChange=(input)=>{\n      //handles the state for message input field\n      this.setState({message:input.target.value})\n\n    }\n\n    handleSubmit=(event)=>{\n        event.preventDefault()\n        this.props.sendMessage(this.state.message)\n        this.setState({message:''})\n    }\n\n    render() {\n        return (\n            <form className=\"send-message-form\"\n                  onSubmit={this.handleSubmit}\n            >\n                <input\n                    onChange={this.handleChange}\n                    value={this.state.message}\n                    placeholder=\"Type message here and hit ENTER\"\n                    type=\"text\" />\n            </form>\n        )\n    }\n}\n \nexport {SendMessageForm};","import React, { Component } from 'react';\n\nimport {RoomList,MessageList,NewRoomForm,SendMessageForm} from './components'\nimport openSocket from 'socket.io-client';\n\nclass App extends Component {\n    state ={\n        messages:[],\n        roomList:[],\n        roomName: null,\n        username:null\n\n    }\n    constructor(props){\n        super(props)\n        console.log(`user ${this.state.username}`)\n        this.sendMessageHandle = this.sendMessage.bind(this)\n        this.addRoomHandle = this.addRoom.bind(this)\n        this.switchRoomHandle = this.switchRoom.bind(this)\n    }\n\n    componentDidMount(){\n        console.log(`chatting in room ${this.state.roomName}`)\n        //setting up socket\n        this.socket = openSocket.connect(\"localhost:3000\")   //when running locally connect to localhost:3030\n        this.socket.on(\"connect\",()=>console.log(\"connected\"))\n        this.socket.on(\"new_message\",(data)=>{\n            this.updateMessages(data)\n        })\n        this.socket.on(\"initialize\",(data)=>{\n            this.updateRooms(data.rooms)\n            this.setState({roomName:data.rooms[0], username: data.usernameValue}) //setting initial room\n            console.log(`initialize .... ${JSON.stringify(this.state.roomName)}`)\n        })\n        this.socket.on(\"createRoom\",(data)=>{\n            this.updateRooms(data.rooms)\n        })\n\n        this.socket.on(\"switchRoom\",(data)=>{\n            console.log('socket method',data.roomName)\n            this.setState({roomName:data.roomName})\n        })\n\n    }\n\n    updateMessages=(data)=>{\n        //called when new message received\n        let msgData = [];\n         msgData = this.state.messages\n         msgData.push({username:data.username,\n            text:data.message\n        })\n        this.setState({messages:msgData})\n    }\n\n    switchRoom(newRoom){\n        console.log(`joining ${newRoom}`)\n       this.setState({roomName:newRoom, messageData:[]})\n       this.socket.emit(\"switchRoom\",{roomName:newRoom})\n    }\n\n    updateRooms(rooms){\n        this.setState({roomList:rooms})\n    }\n    sendMessage(msg){\n        //handle to send message\n        this.socket.emit(\"new_message\",{message:msg})\n    }\n\n    addRoom(newRoom){\n        //adds room through new room form\n        const rooms = [...this.state.roomList]\n        rooms.push(newRoom)\n        this.setState({\n            roomList:rooms\n        })\n        this.socket.emit(\"createRoom\",{roomName:newRoom})\n    }\n\n    render() {\n    return (\n        <div className=\"app\">\n            <RoomList switchRoom={this.switchRoomHandle} \n               selectedRoom = {this.state.roomName}\n               roomList={this.state.roomList}/>\n            <MessageList messageData={this.state.messages}/>\n            <SendMessageForm sendMessage={this.sendMessageHandle}/>\n            <NewRoomForm addRoom={this.addRoomHandle}/>\n        </div>\n    );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}