{"version":3,"sources":["components/Message.js","components/MessageList.js","components/NewRoomForm.js","components/RoomList.js","components/SendMessageForm.js","components/login.js","App.js","serviceWorker.js","index.js"],"names":["Message","props","currentUser","username","react_default","a","createElement","className","style","paddingLeft","backgroundColor","text","MessageList","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","console","log","_this2","messageData","map","message","index","Message_Message","key","chat","name","Component","NewRoomForm","state","roomName","submitHandle","event","preventDefault","addRoom","setState","changeHandle","input","target","value","bind","assertThisInitialized","onSubmit","onChange","type","placeholder","required","id","RoomList","switchRoom","active","selectedRoom","color","fontWeight","href","concat","onClick","roomList","renderElement","SendMessageForm","handleChange","handleSubmit","sendMessage","App","updateMessages","data","msgData","messages","push","environmentPort","sendMessageHandle","addRoomHandle","switchRoomHandle","socket","openSocket","connect","on","rooms","currentRoom","updateRooms","emit","newRoom","msg","toConsumableArray","_this3","_ref","password","axios","post","then","response","status","error","catch","RoomList_RoomList","NewRoomForm_NewRoomForm","MessageList_MessageList","SendMessageForm_SendMessageForm","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oRAEMA,EAAU,SAAAC,GACd,IAAMC,EAAcD,EAAMC,cAAgBD,EAAME,SAAW,KAAO,KAClE,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAAUC,MAAON,EAAc,CAAEO,YAAa,IAAO,IAClEL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBAAoBL,GAAeD,EAAME,UACxDC,EAAAC,EAAAC,cAAA,OACEC,UAAU,eACVC,MAAON,EAAc,CAAEQ,gBAAiB,WAAc,IAErDT,EAAMU,QCRTC,cACJ,SAAAA,EAAYX,GAAO,IAAAY,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,GACjBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMf,IACNmB,QAAQC,IAAI,gBAFKR,wEAKV,IAAAS,EAAAN,KACP,OACEZ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACZS,KAAKf,MAAMsB,YAAYC,IAAI,SAACC,EAASC,GACpC,OACEtB,EAAAC,EAAAC,cAACqB,EAAD,CACEC,IAAKF,EACLf,KAAMc,EAAQI,KACd1B,SAAUsB,EAAQK,KAClB5B,YAAaoB,EAAKrB,MAAMC,wBAfZ6B,aCDpBC,cACH,SAAAA,IAAa,IAAAnB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAgB,IACXnB,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAkB,GAAAb,KAAAH,QAIFiB,MAAQ,CACNC,SAAS,IANErB,EASZsB,aAAa,SAACC,GAEZA,EAAMC,iBACNxB,EAAKZ,MAAMqC,QAAQzB,EAAKoB,MAAMC,UAC9BrB,EAAK0B,SAAS,CAACL,SAAS,MAbdrB,EAgBZ2B,aAAa,SAACC,GAEZ5B,EAAK0B,SAAS,CACZL,SAAUO,EAAMC,OAAOC,SAjB1B9B,EAAKsB,aAAetB,EAAKsB,aAAaS,KAAlB9B,OAAA+B,EAAA,EAAA/B,QAAA+B,EAAA,EAAA/B,CAAAD,KACpBA,EAAK2B,aAAe3B,EAAK2B,aAAaI,KAAlB9B,OAAA+B,EAAA,EAAA/B,QAAA+B,EAAA,EAAA/B,CAAAD,KAHTA,wEAyBR,OACET,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,QAAMwC,SAAU9B,KAAKmB,cACnB/B,EAAAC,EAAAC,cAAA,SACIyC,SAAU/B,KAAKwB,aACfG,MAAO3B,KAAKiB,MAAMC,SAClBc,KAAK,OACLC,YAAY,cACZC,UAAQ,IACZ9C,EAAAC,EAAAC,cAAA,UAAQ6C,GAAG,kBAAkBH,KAAK,UAAlC,cAnCYjB,aCApBqB,qLACOlB,GACXlB,KAAKf,MAAMoD,WAAWnB,sFAORA,EAAUR,GAAM,IAAAb,EAAAG,KACtBsC,EAASpB,IAAalB,KAAKf,MAAMsD,aAAe,CAACC,MAAM,UAAWC,WAAY,QAAW,GACjG,OACErD,EAAAC,EAAAC,cAAA,MAAIsB,IAAKF,EAAOnB,UAAW,QACvBH,EAAAC,EAAAC,cAAA,KACEE,MAAO8C,EACPI,KAAI,IAAAC,OAAMzB,GACV0B,QAAS,kBAAM/C,EAAKwC,WAAWnB,KAE9B,IALH,IAAAyB,OAMQzB,sCAML,IAAAZ,EAAAN,KACT,OACEZ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACfH,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAAA,UACGU,KAAKf,MAAM4D,SAASrC,IAAI,SAACU,EAAUR,GAEpC,OACEJ,EAAKwC,cAAc5B,EAASR,cAjCbK,aCAjBgC,cACF,SAAAA,EAAY9D,GAAM,IAAAY,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA+C,IACdlD,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAiD,GAAA5C,KAAAH,KAAMf,KAQV+D,aAAa,SAACvB,GAEZ5B,EAAK0B,SAAS,CAACd,QAAQgB,EAAMC,OAAOC,SAXpB9B,EAelBoD,aAAa,SAAC7B,GACVA,EAAMC,iBACNxB,EAAKZ,MAAMiE,YAAYrD,EAAKoB,MAAMR,SAClCZ,EAAK0B,SAAS,CAACd,QAAQ,MAhBvBZ,EAAKoB,MAAM,CACPR,QAAS,IAEbZ,EAAKmD,aAAenD,EAAKmD,aAAapB,KAAlB9B,OAAA+B,EAAA,EAAA/B,QAAA+B,EAAA,EAAA/B,CAAAD,KACpBA,EAAKoD,aAAepD,EAAKoD,aAAarB,KAAlB9B,OAAA+B,EAAA,EAAA/B,QAAA+B,EAAA,EAAA/B,CAAAD,KANNA,wEAsBd,OACIT,EAAAC,EAAAC,cAAA,QAAMC,UAAU,oBACVuC,SAAU9B,KAAKiD,cAEjB7D,EAAAC,EAAAC,cAAA,SACIyC,SAAU/B,KAAKgD,aACfrB,MAAO3B,KAAKiB,MAAMR,QAClBwB,YAAY,gCACZD,KAAK,iBA/BKjB,8BCCVA,4BCwILoC,cA9Hb,SAAAA,EAAYlE,GAAO,IAAAY,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAmD,IACjBtD,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAqD,GAAAhD,KAAAH,KAAMf,KA2CRmE,eAAiB,SAAAC,GAEf,IAAIC,EAAU,IACdA,EAAUzD,EAAKoB,MAAMsC,UACbC,KAAKH,GACbxD,EAAK0B,SAAS,CAAEgC,SAAUD,KA/C1BzD,EAAKoB,MAAQ,CACXsC,SAAU,GACVV,SAAU,GACV3B,SAAU,KACV/B,SAAU,MAEZU,EAAK4D,gBAC+D,IACpE5D,EAAK6D,kBAAoB7D,EAAKqD,YAAYtB,KAAjB9B,OAAA+B,EAAA,EAAA/B,QAAA+B,EAAA,EAAA/B,CAAAD,KACzBA,EAAK8D,cAAgB9D,EAAKyB,QAAQM,KAAb9B,OAAA+B,EAAA,EAAA/B,QAAA+B,EAAA,EAAA/B,CAAAD,KACrBA,EAAK+D,iBAAmB/D,EAAKwC,WAAWT,KAAhB9B,OAAA+B,EAAA,EAAA/B,QAAA+B,EAAA,EAAA/B,CAAAD,KAZPA,mFAeC,IAAAS,EAAAN,KAEhBA,KAAK6D,OAASC,IAAWC,QAAQ/D,KAAKyD,iBACtCzD,KAAK6D,OAAOG,GAAG,cAAe,SAAAX,GAC5B/C,EAAK8C,eAAeC,KAEtBrD,KAAK6D,OAAOG,GAAG,aAAc,SAAAX,GAE3B/C,EAAKiB,SAAS,CACZsB,SAASQ,EAAKY,MACd/C,SAAUmC,EAAKa,YACfX,SAAUF,EAAKE,aAGnBvD,KAAK6D,OAAOG,GAAG,aAAc,SAAAX,GAC3B/C,EAAK6D,YAAYd,EAAKY,SAGxBjE,KAAK6D,OAAOG,GAAG,aAAc,SAAAX,GAC3B/C,EAAKiB,SAAS,CAAEL,SAAUmC,EAAKnC,SAAUqC,SAAUF,EAAKE,0DAMxDvD,KAAKiB,MAAM9B,UACba,KAAK6D,OAAOO,KAAK,WAAY,CAAEjF,SAAUa,KAAKiB,MAAM9B,8CAW7CkF,GACTrE,KAAKuB,SAAS,CAAEL,SAAUmD,EAASd,SAAU,KAC7CvD,KAAK6D,OAAOO,KAAK,aAAc,CAAElD,SAAUmD,wCAGjCJ,GACVjE,KAAKuB,SAAS,CAAEsB,SAAUoB,wCAGhBK,GAGVtE,KAAK6D,OAAOO,KAAK,cAAe,CAAE3D,QAAS6D,oCAGrCD,GAEN,IAAMJ,EAAKnE,OAAAyE,EAAA,EAAAzE,CAAOE,KAAKiB,MAAM4B,UAC7BoB,EAAMT,KAAKa,GACXrE,KAAKuB,SAAS,CACZsB,SAAUoB,IAEZjE,KAAK6D,OAAOO,KAAK,aAAc,CAAElD,SAAUmD,yCAGX,IAAAG,EAAAxE,KAAtBb,EAAsBsF,EAAtBtF,SAAUuF,EAAYD,EAAZC,SAEpBC,IACGC,KAAK5E,KAAKyD,gBAAiB,CAAEiB,WAAUvF,aACvC0F,KAAK,SAAAC,GACoB,MAApBA,EAASC,OACXP,EAAKjD,SAAS,CACZpC,SAAU2F,EAASzB,KAAKlE,WAG1BqF,EAAKjD,SAAS,CACZyD,MAAO,2BAIZC,MAAM,SAAAD,GACLR,EAAKjD,SAAS,CACZpC,SAAU,KACV6F,MAAO,4DASb,OACE5F,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,WAASC,UAAU,gBACnBH,EAAAC,EAAAC,cAAC4F,EAAD,CACE7C,WAAYrC,KAAK4D,iBACjBrB,aAAcvC,KAAKiB,MAAMC,SACzB2B,SAAU7C,KAAKiB,MAAM4B,WAEvBzD,EAAAC,EAAAC,cAAC6F,EAAD,CAAa7D,QAAStB,KAAK2D,iBAE3BvE,EAAAC,EAAAC,cAAA,QAAMC,UAAU,gBAChBH,EAAAC,EAAAC,cAAC8F,EAAD,CACE7E,YAAaP,KAAKiB,MAAMsC,SACxBrE,YAAac,KAAKiB,MAAM9B,WAE1BC,EAAAC,EAAAC,cAAC+F,EAAD,CAAiBnC,YAAalD,KAAK0D,6BAxHzB3C,aCAEuE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAOxG,EAAAC,EAAAC,cAACuG,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,KAAK,SAAAsB,GACjCA,EAAaC","file":"static/js/main.b51df651.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Message = props => {\n  const currentUser = props.currentUser === props.username ? \"Me\" : null;\n  return (\n    <div className=\"message\" style={currentUser ? { paddingLeft: 35 } : {}}>\n      <div className=\"message-username\">{currentUser || props.username}</div>\n      <div\n        className=\"message-text\"\n        style={currentUser ? { backgroundColor: \"#e1e6e8\" } : {}}\n      >\n        {props.text}\n      </div>\n    </div>\n  );\n};\n\nexport { Message };\n","import React, { Component } from \"react\";\nimport { Message } from \"../components\";\n\nclass MessageList extends Component {\n  constructor(props) {\n    super(props);\n    console.log(\"message List\");\n  }\n\n  render() {\n    return (\n      <div className=\"message-list\">\n        {this.props.messageData.map((message, index) => {\n          return (\n            <Message\n              key={index}\n              text={message.chat}\n              username={message.name}\n              currentUser={this.props.currentUser}\n            />\n          );\n        })}\n      </div>\n    );\n  }\n}\n\nexport { MessageList };\n","import React, { Component } from 'react';\n\nclass NewRoomForm extends Component {\n   constructor(){\n     super()\n     this.submitHandle = this.submitHandle.bind(this);\n     this.changeHandle = this.changeHandle.bind(this)\n   } \n   state = {\n     roomName:\"\"\n   }\n\n    submitHandle=(event)=>{\n      //handles the form submit action\n      event.preventDefault()\n      this.props.addRoom(this.state.roomName)\n      this.setState({roomName:''})\n    }\n\n    changeHandle=(input)=>{\n      //updates the state when text enter in form\n      this.setState({\n        roomName: input.target.value\n      })\n      // console.log(this.state.roomName)\n    }\n\n    render() { \n        return (\n          <div className=\"new-room-form\">\n            <form onSubmit={this.submitHandle}>\n              <input\n                  onChange={this.changeHandle}\n                  value={this.state.roomName}\n                  type=\"text\" \n                  placeholder=\"Create room\" \n                  required />\n              <button id=\"create-room-btn\" type=\"submit\">+</button>\n            </form>\n          </div>\n          );\n    }\n}\n \nexport {NewRoomForm};","import React, { Component } from \"react\";\n\nclass RoomList extends Component {\n  switchRoom(roomName) {\n  this.props.switchRoom(roomName);\n  }\n\n  componentDidMount(){\n\n  }\n\n  renderElement(roomName, index){\n    const active = roomName === this.props.selectedRoom ? {color:\"#FFC42D\", fontWeight: 'bold',} : {}\n  return(\n    <li key={index} className={\"room\"}>\n        <a\n          style={active}\n          href={`#${roomName}`}\n          onClick={() => this.switchRoom(roomName)}\n        >\n          {\" \"}\n           {` ${roomName}`}\n        </a>\n    </li>\n  )\n  }\n\n  render() {\n  return (\n    <div className=\"rooms-list\">\n    <h3>Rooms</h3>\n    <ul>\n      {this.props.roomList.map((roomName, index) => {\n      //selected room\n      return (\n        this.renderElement(roomName,index)\n      );\n      })}\n    </ul>\n    </div>\n  );\n  }\n}\n\nexport { RoomList };\n","import React, { Component } from 'react';\n\nclass SendMessageForm extends Component {\n    constructor(props){\n        super(props)\n        this.state={\n            message: \"\"\n        }\n        this.handleChange = this.handleChange.bind(this)\n        this.handleSubmit = this.handleSubmit.bind(this)\n    }\n\n    handleChange=(input)=>{\n      //handles the state for message input field\n      this.setState({message:input.target.value})\n\n    }\n\n    handleSubmit=(event)=>{\n        event.preventDefault()\n        this.props.sendMessage(this.state.message)\n        this.setState({message:''})\n    }\n\n    render() {\n        return (\n            <form className=\"send-message-form\"\n                  onSubmit={this.handleSubmit}\n            >\n                <input\n                    onChange={this.handleChange}\n                    value={this.state.message}\n                    placeholder=\"Start typing... Enter to send\"\n                    type=\"text\" />\n            </form>\n        )\n    }\n}\n \nexport {SendMessageForm};","import React, { Component } from \"react\";\nimport \"./login.css\";\n\nclass Login extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      username: \"\",\n      password: \"\"\n    };\n  }\n  onChangeHandle(event) {\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n  }\n\n  submitHandle(event) {\n    event.preventDefault();\n    // references App.js Function\n    const { username, password } = this.state\n    this.props.login({username , password});\n  }\n\n  render() {\n    return (\n      <div className=\"login\">\n        <h1>Login</h1>\n        <form method=\"get\" onSubmit={this.submitHandle.bind(this)}>\n          <input\n            className=\"input\"\n            type=\"text\"\n            value={this.state.username}\n            onChange={this.onChangeHandle.bind(this)}\n            name=\"username\"\n            placeholder=\"Username\"\n            required=\"required\"\n          />\n          <input\n            className=\"input\"\n            type=\"password\"\n            value={this.state.password}\n            onChange={this.onChangeHandle.bind(this)}\n            name=\"password\"\n            placeholder=\"Password\"\n            required=\"required\"\n          />\n          <button type=\"submit\" className=\"btn btn-primary btn-block btn-large\" >\n            Let me in.\n          </button>\n        </form>\n        <small>New accounts will be automatically created</small>\n      </div>\n    );\n  }\n}\n\nexport { Login };\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport {\n  RoomList,\n  MessageList,\n  NewRoomForm,\n  SendMessageForm,\n  Login\n} from \"./components\";\n\nimport openSocket from \"socket.io-client\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      messages: [],\n      roomList: [],\n      roomName: null,\n      username: null\n    };\n    this.environmentPort =\n      process.env.NODE_ENV !== \"production\" ? \"http://localhost:3030\" : \"/\"; //used to set port either to 3030 or /\n    this.sendMessageHandle = this.sendMessage.bind(this);\n    this.addRoomHandle = this.addRoom.bind(this);\n    this.switchRoomHandle = this.switchRoom.bind(this);\n  }\n\n  componentDidMount() {\n    //setting up socket\n      this.socket = openSocket.connect(this.environmentPort); //when running locally connect to localhost:3030\n      this.socket.on(\"new_message\", data => {\n        this.updateMessages(data);\n      });\n      this.socket.on(\"initialize\", data => {\n        // this.updateRooms(data.rooms);\n        this.setState({\n          roomList:data.rooms,\n          roomName: data.currentRoom,\n          messages: data.messages\n        }); //setting initial room\n      });\n      this.socket.on(\"createRoom\", data => {\n        this.updateRooms(data.rooms);\n      });\n\n      this.socket.on(\"switchRoom\", data => {\n        this.setState({ roomName: data.roomName, messages: data.messages });\n      });\n\n  }\n\n  componentDidUpdate(){\n    if(!this.state.username){\n      this.socket.emit(\"username\", { username: this.state.username });\n    }\n  }\n  updateMessages = data => {\n    //called when new message received\n    let msgData = [];\n    msgData = this.state.messages;\n    msgData.push(data);\n    this.setState({ messages: msgData });\n  };\n\n  switchRoom(newRoom) {\n    this.setState({ roomName: newRoom, messages: [] });\n    this.socket.emit(\"switchRoom\", { roomName: newRoom });\n  }\n\n  updateRooms(rooms) {\n    this.setState({ roomList: rooms });\n  }\n\n  sendMessage(msg) {\n    //handle to send message\n    //message sent to server and then handled by updateMessages()\n    this.socket.emit(\"new_message\", { message: msg });\n  }\n\n  addRoom(newRoom) {\n    //adds room through new room form\n    const rooms = [...this.state.roomList];\n    rooms.push(newRoom);\n    this.setState({\n      roomList: rooms\n    });\n    this.socket.emit(\"createRoom\", { roomName: newRoom });\n  }\n\n  userLogin({ username, password }) {\n    //used to authenticate the user\n    axios\n      .post(this.environmentPort, { password, username })\n      .then(response => {\n        if (response.status === 200) {\n          this.setState({\n            username: response.data.username\n          });\n        } else {\n          this.setState({\n            error: \"something went wrong\"\n          });\n        }\n      })\n      .catch(error => {\n        this.setState({\n          username: null,\n          error: \"something went wrong\"\n        });\n      });\n  }\n\n  render() {\n    // if (!this.state.username) {\n    //   return <Login login={this.userLogin.bind(this)} />;\n    // }\n    return (\n      <div className=\"app\">\n        <section className=\"side-section\">\n        <RoomList\n          switchRoom={this.switchRoomHandle}\n          selectedRoom={this.state.roomName}\n          roomList={this.state.roomList}\n        />\n        <NewRoomForm addRoom={this.addRoomHandle} />\n        </section>\n        <main className=\"main-section\">\n        <MessageList\n          messageData={this.state.messages}\n          currentUser={this.state.username}\n        />\n        <SendMessageForm sendMessage={this.sendMessageHandle} />\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}