{"version":3,"sources":["components/Message.js","components/MessageList.js","components/NewRoomForm.js","components/RoomList.js","components/SendMessageForm.js","App.js","serviceWorker.js","index.js"],"names":["Message","props","currentUser","username","react_default","a","createElement","className","style","paddingLeft","backgroundColor","text","MessageList","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","messages","messageData","_this2","map","message","index","Message_Message","key","Component","NewRoomForm","state","roomName","submitHandle","event","preventDefault","addRoom","setState","changeHandle","input","target","value","bind","assertThisInitialized","onSubmit","onChange","type","placeholder","required","id","RoomList","switchRoom","active","selectedRoom","color","fontSize","href","concat","onClick","styles","headerStyle","roomList","renderElement","SendMessageForm","handleChange","handleSubmit","sendMessage","App","updateMessages","data","msgData","push","sendMessageHandle","addRoomHandle","switchRoomHandle","socket","openSocket","connect","on","console","log","updateRooms","rooms","usernameValue","newRoom","emit","msg","toConsumableArray","RoomList_RoomList","MessageList_MessageList","SendMessageForm_SendMessageForm","NewRoomForm_NewRoomForm","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e634b685.chunk.js","sourcesContent":["import React from 'react';\n\nconst Message =(props)=>{\n      const currentUser = props.currentUser === props.username ? \"Me\" : null;\n         return (\n            <div className=\"message\" style={currentUser ? {paddingLeft: 25}: {}}>\n              <div className=\"message-username\">\n                 {currentUser || props.username}\n              </div>\n              <div className=\"message-text\" style={currentUser ? {backgroundColor:\"#7280ad\"}: {}}>\n                 {props.text}\n              </div>\n             </div>\n           )\n       \n}\n \nexport {Message};","import React, { Component } from 'react';\nimport {Message} from '../components'\n\nclass MessageList extends Component {\n    constructor(props){\n      super(props)\n      this.messages = this.props.messageData\n    }\n    render() { \n        return (\n          <div className=\"message-list\">\n            {this.messages.map((message,index)=>{\n              return (\n                <Message key={index} \n                    text={message.text}\n                    username={message.username}\n                    currentUser={this.props.currentUser}\n                 />\n )\n            })}\n          </div> );\n    }\n}\n \nexport { MessageList};","import React, { Component } from 'react';\n\nclass NewRoomForm extends Component {\n   constructor(){\n     super()\n     this.submitHandle = this.submitHandle.bind(this);\n     this.changeHandle = this.changeHandle.bind(this)\n   } \n   state = {\n     roomName:\"\"\n   }\n\n    submitHandle=(event)=>{\n      //handles the form submit action\n      event.preventDefault()\n      this.props.addRoom(this.state.roomName)\n      this.setState({roomName:''})\n    }\n\n    changeHandle=(input)=>{\n      //updates the state when text enter in form\n      this.setState({\n        roomName: input.target.value\n      })\n      // console.log(this.state.roomName)\n    }\n\n    render() { \n        return (\n          <div className=\"new-room-form\">\n            <form onSubmit={this.submitHandle}>\n              <input\n                  onChange={this.changeHandle}\n                  value={this.state.roomName}\n                  type=\"text\" \n                  placeholder=\"NewRoomForm\" \n                  required />\n              <button id=\"create-room-btn\" type=\"submit\">+</button>\n            </form>\n          </div>\n          );\n    }\n}\n \nexport {NewRoomForm};","import React, { Component } from \"react\";\n\nclass RoomList extends Component {\n  switchRoom(roomName) {\n  this.props.switchRoom(roomName);\n  }\n\n  componentDidMount(){\n\n  }\n\n  renderElement(roomName, index){\n    const active = roomName === this.props.selectedRoom ? { color: \"#FFA011\", fontSize:\"1.2rem\"} : {}\n  return(\n    <li key={index} className={\"room \"}>\n        <a\n          style={active}\n          href={`#${roomName}`}\n          onClick={() => this.switchRoom(roomName)}\n        >\n          {\" \"}\n           {` ${roomName}`}\n        </a>\n    </li>\n  )\n  }\n\n  render() {\n  return (\n    <div className=\"rooms-list\">\n    <ul>\n      <h3 style={styles.headerStyle}>Available Rooms</h3>\n      {this.props.roomList.map((roomName, index) => {\n      //selected room\n      return (\n        this.renderElement(roomName,index)\n      );\n      })}\n    </ul>\n    </div>\n  );\n  }\n}\n\nexport { RoomList };\n\nconst styles = {\n  headerStyle: {\n  fontSize: 22,\n  color:\"#cfddf4\"\n  }\n};\n","import React, { Component } from 'react';\n\nclass SendMessageForm extends Component {\n    constructor(props){\n        super(props)\n\n        this.state={\n            message: \"\"\n        }\n        this.handleChange = this.handleChange.bind(this)\n        this.handleSubmit = this.handleSubmit.bind(this)\n    }\n\n    handleChange=(input)=>{\n      //handles the state for message input field\n      this.setState({message:input.target.value})\n\n    }\n\n    handleSubmit=(event)=>{\n        event.preventDefault()\n        this.props.sendMessage(this.state.message)\n        this.setState({message:''})\n    }\n\n    render() {\n        return (\n            <form className=\"send-message-form\"\n                  onSubmit={this.handleSubmit}\n            >\n                <input\n                    onChange={this.handleChange}\n                    value={this.state.message}\n                    placeholder=\"Type message here and hit ENTER\"\n                    type=\"text\" />\n            </form>\n        )\n    }\n}\n \nexport {SendMessageForm};","import React, { Component } from 'react';\n\nimport {RoomList,MessageList,NewRoomForm,SendMessageForm} from './components'\nimport openSocket from 'socket.io-client';\n\nclass App extends Component {\n  state ={\n    messages:[],\n    roomList:[],\n    roomName: null,\n    username:null\n\n  }\n  constructor(props){\n    super(props)\n    this.sendMessageHandle = this.sendMessage.bind(this)\n    this.addRoomHandle = this.addRoom.bind(this)\n    this.switchRoomHandle = this.switchRoom.bind(this)\n  }\n\n  componentDidMount(){\n\n    //setting up socket\n    this.socket = openSocket.connect(\"localhost:3030/\")   //when running locally connect to localhost:3030\n    this.socket.on(\"connect\",()=>console.log(\"connected\"))\n    this.socket.on(\"new_message\",(data)=>{\n      this.updateMessages(data)\n    })\n    this.socket.on(\"initialize\",(data)=>{\n      this.updateRooms(data.rooms)\n      this.setState({roomName:data.rooms[0], username: data.usernameValue}) //setting initial room\n    })\n    this.socket.on(\"createRoom\",(data)=>{\n      this.updateRooms(data.rooms)\n    })\n\n    this.socket.on(\"switchRoom\",(data)=>{\n      console.log('socket method',data.roomName)\n      this.setState({roomName:data.roomName})\n    })\n  }\n\n  updateMessages=(data)=>{\n    //called when new message received\n    let msgData = [];\n     msgData = this.state.messages\n     msgData.push({username:data.username,\n      text:data.message\n    })\n    this.setState({messages:msgData})\n  }\n\n  switchRoom(newRoom){\n    console.log(`joining ${newRoom}`)\n     this.setState({roomName:newRoom, messageData:[]})\n     this.socket.emit(\"switchRoom\",{roomName:newRoom})\n  }\n\n  updateRooms(rooms){\n    this.setState({roomList:rooms})\n  }\n  sendMessage(msg){\n    //handle to send message\n    this.socket.emit(\"new_message\",{message:msg})\n  }\n\n  addRoom(newRoom){\n    //adds room through new room form\n    const rooms = [...this.state.roomList]\n    rooms.push(newRoom)\n    this.setState({\n      roomList:rooms\n    })\n    this.socket.emit(\"createRoom\",{roomName:newRoom})\n  }\n\n  render() {\n  return (\n    <div className=\"app\">\n      <RoomList switchRoom={this.switchRoomHandle} \n         selectedRoom = {this.state.roomName}\n         roomList={this.state.roomList}/>\n      <MessageList messageData={this.state.messages} currentUser={this.state.username}/>\n      <SendMessageForm sendMessage={this.sendMessageHandle}/>\n      <NewRoomForm addRoom={this.addRoomHandle}/>\n    </div>\n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}