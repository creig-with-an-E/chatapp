{"ast":null,"code":"import _toConsumableArray from \"/Users/fortunephiri/Documents/Projects/chatapp/frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/fortunephiri/Documents/Projects/chatapp/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/fortunephiri/Documents/Projects/chatapp/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/fortunephiri/Documents/Projects/chatapp/frontend/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/fortunephiri/Documents/Projects/chatapp/frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/fortunephiri/Documents/Projects/chatapp/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/fortunephiri/Documents/Projects/chatapp/frontend/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/fortunephiri/Documents/Projects/chatapp/frontend/src/App.js\";\nimport React, { Component } from 'react';\nimport { RoomList, MessageList, NewRoomForm, SendMessageForm } from './components';\nimport openSocket from 'socket.io-client';\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n\n    _this.updateMessages = function (data) {\n      //called when new message received\n      var msgData = [];\n      msgData = _this.state.messages;\n      msgData.push({\n        username: data.username,\n        text: data.message\n      });\n\n      _this.setState({\n        messages: msgData\n      });\n    };\n\n    _this.state = {\n      messages: [],\n      roomList: [],\n      roomName: null,\n      username: null\n    };\n    _this.environmentPort = process.env.NODE_ENV !== \"production\" ? \"localhost:3030\" : \"/\"; //used to set port either to 3030 or /\n\n    _this.sendMessageHandle = _this.sendMessage.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.addRoomHandle = _this.addRoom.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.switchRoomHandle = _this.switchRoom.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      //setting up socket\n      this.socket = openSocket.connect(this.environmentPort); //when running locally connect to localhost:3030\n\n      this.socket.on(\"connect\", function () {\n        return console.log(\"connected\");\n      });\n      this.socket.on(\"new_message\", function (data) {\n        _this2.updateMessages(data);\n      });\n      this.socket.on(\"initialize\", function (data) {\n        _this2.updateRooms(data.rooms);\n\n        _this2.setState({\n          roomName: data.rooms[0],\n          username: data.usernameValue\n        }); //setting initial room\n\n      });\n      this.socket.on(\"createRoom\", function (data) {\n        _this2.updateRooms(data.rooms);\n      });\n      this.socket.on(\"switchRoom\", function (data) {\n        console.log('socket method', data.roomName);\n\n        _this2.setState({\n          roomName: data.roomName\n        });\n      });\n    }\n  }, {\n    key: \"switchRoom\",\n    value: function switchRoom(newRoom) {\n      console.log(\"joining \".concat(newRoom));\n      this.setState({\n        roomName: newRoom,\n        messageData: []\n      });\n      this.socket.emit(\"switchRoom\", {\n        roomName: newRoom\n      });\n    }\n  }, {\n    key: \"updateRooms\",\n    value: function updateRooms(rooms) {\n      this.setState({\n        roomList: rooms\n      });\n    }\n  }, {\n    key: \"sendMessage\",\n    value: function sendMessage(msg) {\n      //handle to send message\n      this.socket.emit(\"new_message\", {\n        message: msg\n      });\n    }\n  }, {\n    key: \"addRoom\",\n    value: function addRoom(newRoom) {\n      //adds room through new room form\n      var rooms = _toConsumableArray(this.state.roomList);\n\n      rooms.push(newRoom);\n      this.setState({\n        roomList: rooms\n      });\n      this.socket.emit(\"createRoom\", {\n        roomName: newRoom\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"app\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, this.environmentPort);\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/fortunephiri/Documents/Projects/chatapp/frontend/src/App.js"],"names":["React","Component","RoomList","MessageList","NewRoomForm","SendMessageForm","openSocket","App","props","updateMessages","data","msgData","state","messages","push","username","text","message","setState","roomList","roomName","environmentPort","process","env","NODE_ENV","sendMessageHandle","sendMessage","bind","addRoomHandle","addRoom","switchRoomHandle","switchRoom","socket","connect","on","console","log","updateRooms","rooms","usernameValue","newRoom","messageData","emit","msg"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\nimport {RoomList,MessageList,NewRoomForm,SendMessageForm} from './components'\nimport openSocket from 'socket.io-client';\n\nclass App extends Component {\n  constructor(props){\n    super(props)\n    this.state ={\n      messages:[],\n      roomList:[],\n      roomName: null,\n      username:null\n    }\n    this.environmentPort = (process.env.NODE_ENV !== \"production\" ? \"localhost:3030\": \"/\")     //used to set port either to 3030 or /\n    this.sendMessageHandle = this.sendMessage.bind(this)\n    this.addRoomHandle = this.addRoom.bind(this)\n    this.switchRoomHandle = this.switchRoom.bind(this)\n  }\n\n  componentDidMount(){\n\n    //setting up socket\n    this.socket = openSocket.connect(this.environmentPort)   //when running locally connect to localhost:3030\n    this.socket.on(\"connect\",()=>console.log(\"connected\"))\n    this.socket.on(\"new_message\",(data)=>{\n      this.updateMessages(data)\n    })\n    this.socket.on(\"initialize\",(data)=>{\n      this.updateRooms(data.rooms)\n      this.setState({roomName:data.rooms[0], username: data.usernameValue}) //setting initial room\n    })\n    this.socket.on(\"createRoom\",(data)=>{\n      this.updateRooms(data.rooms)\n    })\n\n    this.socket.on(\"switchRoom\",(data)=>{\n      console.log('socket method',data.roomName)\n      this.setState({roomName:data.roomName})\n    })\n  }\n\n  updateMessages=(data)=>{\n    //called when new message received\n    let msgData = [];\n     msgData = this.state.messages\n     msgData.push({username:data.username,\n      text:data.message\n    })\n    this.setState({messages:msgData})\n  }\n\n  switchRoom(newRoom){\n    console.log(`joining ${newRoom}`)\n     this.setState({roomName:newRoom, messageData:[]})\n     this.socket.emit(\"switchRoom\",{roomName:newRoom})\n  }\n\n  updateRooms(rooms){\n    this.setState({roomList:rooms})\n  }\n  sendMessage(msg){\n    //handle to send message\n    this.socket.emit(\"new_message\",{message:msg})\n  }\n\n  addRoom(newRoom){\n    //adds room through new room form\n    const rooms = [...this.state.roomList]\n    rooms.push(newRoom)\n    this.setState({\n      roomList:rooms\n    })\n    this.socket.emit(\"createRoom\",{roomName:newRoom})\n  }\n\n  render() {\n  return (\n    <div className=\"app\">\n      {this.environmentPort}\n      {/* <RoomList switchRoom={this.switchRoomHandle} \n         selectedRoom = {this.state.roomName}\n         roomList={this.state.roomList}/>\n      <MessageList messageData={this.state.messages} currentUser={this.state.username}/>\n      <SendMessageForm sendMessage={this.sendMessageHandle}/>\n      <NewRoomForm addRoom={this.addRoomHandle}/> */}\n    </div>\n  );\n}\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}