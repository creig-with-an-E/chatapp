{"ast":null,"code":"import _toConsumableArray from \"/Users/fortunephiri/Documents/Projects/chatapp/frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/fortunephiri/Documents/Projects/chatapp/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/fortunephiri/Documents/Projects/chatapp/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/fortunephiri/Documents/Projects/chatapp/frontend/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/fortunephiri/Documents/Projects/chatapp/frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/fortunephiri/Documents/Projects/chatapp/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/fortunephiri/Documents/Projects/chatapp/frontend/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/fortunephiri/Documents/Projects/chatapp/frontend/src/App.js\";\nimport React, { Component } from \"react\";\nimport { RoomList, MessageList, NewRoomForm, SendMessageForm } from \"./components\";\nimport openSocket from \"socket.io-client\";\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n\n    _this.updateMessages = function (messsage) {\n      console.log(_this.state.messages[0]);\n      /*\n        message object structure\n        {chat:\"\", roomName:\"\",}\n      */\n\n      console.log(_this.state.messages[0]);\n\n      _this.setState({});\n    };\n\n    _this.state = {\n      messages: [],\n      roomList: [],\n      roomName: null,\n      username: null\n    };\n    _this.environmentPort = process.env.NODE_ENV !== \"production\" ? \"localhost:3030\" : \"/\"; //used to set port either to 3030 or /\n\n    _this.sendMessageHandle = _this.sendMessage.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.addRoomHandle = _this.addRoom.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.switchRoomHandle = _this.switchRoom.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      //setting up socket\n      this.socket = openSocket.connect(this.environmentPort); //when running locally connect to localhost:3030\n\n      this.socket.on(\"new_message\", function (data) {\n        _this2.updateMessages(data);\n      });\n      this.socket.on(\"initialize\", function (data) {\n        _this2.updateRooms(data.rooms);\n\n        _this2.setState({\n          roomName: data.rooms[0],\n          username: data.username,\n          messages: data.messages\n        }); //setting initial room\n\n      });\n      this.socket.on(\"createRoom\", function (data) {\n        _this2.updateRooms(data.rooms);\n      });\n      this.socket.on(\"switchRoom\", function (data) {\n        console.log(\"socket method\", data.roomName);\n\n        _this2.setState({\n          roomName: data.roomName\n        });\n      });\n    }\n  }, {\n    key: \"switchRoom\",\n    value: function switchRoom(newRoom) {\n      console.log(\"joining \".concat(newRoom));\n      this.setState({\n        roomName: newRoom,\n        messageData: []\n      });\n      this.socket.emit(\"switchRoom\", {\n        roomName: newRoom\n      });\n    }\n  }, {\n    key: \"updateRooms\",\n    value: function updateRooms(rooms) {\n      this.setState({\n        roomList: rooms\n      });\n    }\n  }, {\n    key: \"sendMessage\",\n    value: function sendMessage(msg) {\n      //handle to send message\n      this.socket.emit(\"new_message\", {\n        message: msg\n      });\n    }\n  }, {\n    key: \"addRoom\",\n    value: function addRoom(newRoom) {\n      //adds room through new room form\n      var rooms = _toConsumableArray(this.state.roomList);\n\n      rooms.push(newRoom);\n      this.setState({\n        roomList: rooms\n      });\n      this.socket.emit(\"createRoom\", {\n        roomName: newRoom\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"app\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }, React.createElement(RoomList, {\n        switchRoom: this.switchRoomHandle,\n        selectedRoom: this.state.roomName,\n        roomList: this.state.roomList,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }), React.createElement(MessageList, {\n        messageData: this.state.messages,\n        currentUser: this.state.username,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }), React.createElement(SendMessageForm, {\n        sendMessage: this.sendMessageHandle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }), React.createElement(NewRoomForm, {\n        addRoom: this.addRoomHandle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/fortunephiri/Documents/Projects/chatapp/frontend/src/App.js"],"names":["React","Component","RoomList","MessageList","NewRoomForm","SendMessageForm","openSocket","App","props","updateMessages","messsage","console","log","state","messages","setState","roomList","roomName","username","environmentPort","process","env","NODE_ENV","sendMessageHandle","sendMessage","bind","addRoomHandle","addRoom","switchRoomHandle","switchRoom","socket","connect","on","data","updateRooms","rooms","newRoom","messageData","emit","msg","message","push"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\n\nimport {\n  RoomList,\n  MessageList,\n  NewRoomForm,\n  SendMessageForm\n} from \"./components\";\nimport openSocket from \"socket.io-client\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      messages: [],\n      roomList: [],\n      roomName: null,\n      username: null\n    };\n    this.environmentPort =\n      process.env.NODE_ENV !== \"production\" ? \"localhost:3030\" : \"/\"; //used to set port either to 3030 or /\n    this.sendMessageHandle = this.sendMessage.bind(this);\n    this.addRoomHandle = this.addRoom.bind(this);\n    this.switchRoomHandle = this.switchRoom.bind(this);\n  }\n\n  componentDidMount() {\n    //setting up socket\n    this.socket = openSocket.connect(this.environmentPort); //when running locally connect to localhost:3030\n    this.socket.on(\"new_message\", data => {\n      this.updateMessages(data);\n    });\n    this.socket.on(\"initialize\", data => {\n      this.updateRooms(data.rooms);\n      this.setState({ \n        roomName: data.rooms[0],\n        username: data.username,\n        messages: data.messages\n       }); //setting initial room\n    });\n    this.socket.on(\"createRoom\", data => {\n      this.updateRooms(data.rooms);\n    });\n\n    this.socket.on(\"switchRoom\", data => {\n      console.log(\"socket method\", data.roomName);\n      this.setState({ roomName: data.roomName });\n    });\n  }\n\n  updateMessages = messsage => {\n    console.log(this.state.messages[0])\n    /*\n      message object structure\n      {chat:\"\", roomName:\"\",}\n    */\n    console.log(this.state.messages[0])\n    this.setState({})\n\n  };\n\n  switchRoom(newRoom) {\n    console.log(`joining ${newRoom}`);\n    this.setState({ roomName: newRoom, messageData: [] });\n    this.socket.emit(\"switchRoom\", { roomName: newRoom });\n  }\n\n  updateRooms(rooms) {\n    this.setState({ roomList: rooms });\n  }\n  sendMessage(msg) {\n    //handle to send message\n    this.socket.emit(\"new_message\", { message: msg });\n  }\n\n  addRoom(newRoom) {\n    //adds room through new room form\n    const rooms = [...this.state.roomList];\n    rooms.push(newRoom);\n    this.setState({\n      roomList: rooms\n    });\n    this.socket.emit(\"createRoom\", { roomName: newRoom });\n  }\n\n  render() {\n    return (\n      <div className=\"app\">\n        <RoomList\n          switchRoom={this.switchRoomHandle}\n          selectedRoom={this.state.roomName}\n          roomList={this.state.roomList}\n        />\n        <MessageList\n          messageData={this.state.messages}\n          currentUser={this.state.username}\n        />\n        <SendMessageForm sendMessage={this.sendMessageHandle} />\n        <NewRoomForm addRoom={this.addRoomHandle} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}